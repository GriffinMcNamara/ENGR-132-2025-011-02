function [avg_speed_data] = M3_sub2_011_02_catalan0(speed_data)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ENGR 132 
% Program Description 
% This is a subfunction file that will manage the data noise and erros to
% ensure the data is usable and will be accurate for parameter
% identification
%
% Function Call
% [Clean_Speeds] = M1A_sub2_021_06_briggs56(Noisy_Data)
%
% Input Arguments
%
% The input for this function "Noisy_Data" will be the noisy data of a
% specified tire type for one of the three cars tested
% 
%
% Output Arguments
%
% The outputs for this function "Clean_Speeds" will be the clean data
% produced for a specified tire type for one of the three cars tested
% 
%
% Assignment Information
%   Assignment:     M1A, Problem #1
%   Team member:    Lynden Briggs, briggs56@purdue.edu
%   Team ID:        021-06
%   Academic Integrity:
%     [] We worked with one or more peers but our collaboration
%        maintained academic integrity.
%     Peers we worked with: Name, login@purdue [repeat for each]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% ____________________
%% INITIALIZATION


nrows = size(speed_data, 1 );        % assign number of rows

ncols = size(speed_data, 2);        % assign number of columns

time = speed_data(:,1);             % initilize time variable colum

% create new matrix of zeros the same size as Noisy Data
Clean_Data = zeros(size(speed_data));   


%% ____________________
%% CALCULATIONS

% Clean the Noisy Data of any error values and frozen data

for y = 2:ncols          % outer loop to iterate through each column
      
    for x = 3:nrows - 2  % inner loop to iterate through each row avoiding boundry issues

        if isnan(speed_data(x,y))  % checks for NaN value

            Clean_Data(x,y) = 0;   % replaces with zero if true
        
            % checks for frozen data points in surroundings (2 above/below)
        elseif speed_data(x,y) == speed_data(x-1,y) && ...
                speed_data(x,y) == speed_data(x+1,y) && ...
                speed_data(x,y) == speed_data(x-2,y) && ...
                speed_data(x,y) == speed_data(x+2,y)
            
            Clean_Data(x,y) = 0;   % replaces with zero if true

        elseif ~isnan(speed_data(x,y))   % checks if value is not NaN
            
            Clean_Data(x,y) = speed_data(x,y);   % copies value if true
        end
    end
end

% Smooths the new Clean Data using a four point average

for y = 2:ncols       % outer loop to iterate through each column

    for x = 2:nrows - 2   % inner loop to iterate through each row
        averager = 4;           % initialize average divisor
        for counter = -1:1:2    % nested loop to iterate over four neighbors

            if Clean_Data(x+counter,y) == 0   % checks for value of 0
                averager = averager -1;     % adjust average divisor if true
            end
        end
        
        % calculates a four point average unless some values are 0
        Clean_Data(x,y) = (Clean_Data(x-1,y) + Clean_Data(x,y)...
            + Clean_Data(x+1,y) + Clean_Data(x+2,y))/averager;
    end
end



%% ____________________
%% FORMATTED TEXT/FIGURE DISPLAYS

% fprintf('Data successfully passed to subfunction 2 progammed by Lynden Briggs \n')

%% ____________________
%% RESULTS

% final clean data of speeds

avg_speed_data = Clean_Data(2:end, 2:end);


%% ____________________
%% ACADEMIC INTEGRITY STATEMENT
% We have not used source code obtained from any other unauthorized
% source, either modified or unmodified. Neither have we provided
% access to my code to another. The program we are submitting
% is our own original work.
